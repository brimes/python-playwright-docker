name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'version.json'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'version.json'
  # Permite execu√ß√£o manual
  workflow_dispatch:
  # Build semanal para manter a imagem atualizada
  schedule:
    - cron: '0 2 * * 1'  # Todo segunda-feira √†s 2h UTC

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Read version from version.json
      id: version
      run: |
        VERSION=$(cat version.json | jq -r '.version')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version extracted: $VERSION"

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=python3.11-playwright-chromium
          type=raw,value={{date 'YYYY-MM-DD'}}
          type=raw,value=v${{ steps.version.outputs.version }}
          type=raw,value=${{ steps.version.outputs.version }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Test the image
      run: |
        echo "üß™ Testing image with version v${{ steps.version.outputs.version }}"
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python -c "from playwright.sync_api import sync_playwright; print('‚úÖ Playwright funcionando!')"
        echo "üöÄ Testing Chromium ARM64 functionality..."
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python -c "
        from playwright.sync_api import sync_playwright
        with sync_playwright() as p:
            browser = p.chromium.launch(headless=True)
            print(f'‚úÖ Chromium ARM64 funcionando! Vers√£o: {browser.version}')
            browser.close()
        "
        echo "üîç Verifying PLAYWRIGHT_BROWSERS_PATH is set correctly..."
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python -c "import os; print(f'‚úÖ PLAYWRIGHT_BROWSERS_PATH: {os.environ.get(\"PLAYWRIGHT_BROWSERS_PATH\", \"NOT SET\")}')"